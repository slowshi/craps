import { DiceRoll } from './dice';
export type LineKey = 'linePassLine' | 'lineDontPassLine' | 'lineComeLine' | 'lineDontComeLine';
export declare const lineRolls: string[];
export interface IBaseBet {
    amount: number;
    odds: number;
    working: boolean;
    off: boolean;
}
export interface IBetMap {
    linePassLine: IBaseBet;
    linePassLine4: IBaseBet;
    linePassLine5: IBaseBet;
    linePassLine6: IBaseBet;
    linePassLine8: IBaseBet;
    linePassLine9: IBaseBet;
    linePassLine10: IBaseBet;
    lineDontPassLine: IBaseBet;
    lineDontPassLine4: IBaseBet;
    lineDontPassLine5: IBaseBet;
    lineDontPassLine6: IBaseBet;
    lineDontPassLine8: IBaseBet;
    lineDontPassLine9: IBaseBet;
    lineDontPassLine10: IBaseBet;
    lineComeLine: IBaseBet;
    lineComeLine4: IBaseBet;
    lineComeLine5: IBaseBet;
    lineComeLine6: IBaseBet;
    lineComeLine8: IBaseBet;
    lineComeLine9: IBaseBet;
    lineComeLine10: IBaseBet;
    lineDontComeLine: IBaseBet;
    lineDontComeLine4: IBaseBet;
    lineDontComeLine5: IBaseBet;
    lineDontComeLine6: IBaseBet;
    lineDontComeLine8: IBaseBet;
    lineDontComeLine9: IBaseBet;
    lineDontComeLine10: IBaseBet;
    centerField: IBaseBet;
    centerAnyCraps: IBaseBet;
    center7: IBaseBet;
    center12: IBaseBet;
    center11: IBaseBet;
    center3: IBaseBet;
    center2: IBaseBet;
    centerHop: IBaseBet;
    centerHard4: IBaseBet;
    centerHard6: IBaseBet;
    centerHard8: IBaseBet;
    centerHard10: IBaseBet;
    centerHop64: IBaseBet;
    centerHop63: IBaseBet;
    centerHop62: IBaseBet;
    centerHop61: IBaseBet;
    centerHop55: IBaseBet;
    centerHop54: IBaseBet;
    centerHop53: IBaseBet;
    centerHop52: IBaseBet;
    centerHop51: IBaseBet;
    centerHop44: IBaseBet;
    centerHop43: IBaseBet;
    centerHop42: IBaseBet;
    centerHop41: IBaseBet;
    centerHop33: IBaseBet;
    centerHop32: IBaseBet;
    centerHop31: IBaseBet;
    centerHop22: IBaseBet;
    numbersPlace4: IBaseBet;
    numbersPlace5: IBaseBet;
    numbersPlace6: IBaseBet;
    numbersPlace8: IBaseBet;
    numbersPlace9: IBaseBet;
    numbersPlace10: IBaseBet;
    numbersBuy4: IBaseBet;
    numbersBuy5: IBaseBet;
    numbersBuy6: IBaseBet;
    numbersBuy8: IBaseBet;
    numbersBuy9: IBaseBet;
    numbersBuy10: IBaseBet;
    numbersLay4: IBaseBet;
    numbersLay5: IBaseBet;
    numbersLay6: IBaseBet;
    numbersLay8: IBaseBet;
    numbersLay9: IBaseBet;
    numbersLay10: IBaseBet;
}
export declare const baseBetDefaults: IBaseBet;
export interface IBetResolves {
    rolls: DiceRoll[];
    pay: number;
}
export declare const updateBetMap: (betMap: Partial<IBetMap>, betKey: keyof IBetMap, bet: IBaseBet) => Partial<IBetMap>;
export declare const moveLineBet: (betMap: Partial<IBetMap>, lineKey: LineKey, pointValue: number) => Partial<IBetMap>;
export declare const passLineBetValidation: (currentBet: Partial<IBetMap>, incomingBet: Partial<IBetMap>, pointValue: number) => boolean;
export declare const passLinePointValidation: (currentBet: Partial<IBetMap>, incomingBet: Partial<IBetMap>, pointValue: number) => boolean;
export declare const dontPassLinePointValidation: (currentBet: Partial<IBetMap>, incomingBet: Partial<IBetMap>, pointValue: number) => boolean;
export declare const comeLineBetValidation: (currentBet: Partial<IBetMap>, incomingBet: Partial<IBetMap>, pointValue: number) => boolean;
export declare const comeLinePointValidation: (currentBet: Partial<IBetMap>, incomingBet: Partial<IBetMap>) => boolean;
export declare const dontComeLinePointValidation: (currentBet: Partial<IBetMap>, incomingBet: Partial<IBetMap>) => boolean;
export declare const centerBetValidation: (currentBet: Partial<IBetMap>, incomingBet: Partial<IBetMap>) => boolean;
export declare const numbersBetValidation: (currentBet: Partial<IBetMap>, incomingBet: Partial<IBetMap>) => boolean;
export declare const isValidBet: (betMap: Partial<IBetMap>, betKey: string, bet: Partial<IBaseBet>, pointValue: number) => boolean;
export declare const isEmptyBet: (bet: IBaseBet) => boolean;
export declare const getBetPayByRoll: (roll: DiceRoll, resolves: IBetResolves[]) => number;
